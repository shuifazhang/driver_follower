// Generated by gencpp from file tf_follower/Target.msg
// DO NOT EDIT!


#ifndef TF_FOLLOWER_MESSAGE_TARGET_H
#define TF_FOLLOWER_MESSAGE_TARGET_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace tf_follower
{
template <class ContainerAllocator>
struct Target_
{
  typedef Target_<ContainerAllocator> Type;

  Target_()
    : header()
    , name()
    , distance_now(0.0)
    , angle_now(0.0)
    , distance_last(0.0)
    , angle_last(0.0)  {
    }
  Target_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , name(_alloc)
    , distance_now(0.0)
    , angle_now(0.0)
    , distance_last(0.0)
    , angle_last(0.0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _name_type;
  _name_type name;

   typedef double _distance_now_type;
  _distance_now_type distance_now;

   typedef double _angle_now_type;
  _angle_now_type angle_now;

   typedef double _distance_last_type;
  _distance_last_type distance_last;

   typedef double _angle_last_type;
  _angle_last_type angle_last;





  typedef boost::shared_ptr< ::tf_follower::Target_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::tf_follower::Target_<ContainerAllocator> const> ConstPtr;

}; // struct Target_

typedef ::tf_follower::Target_<std::allocator<void> > Target;

typedef boost::shared_ptr< ::tf_follower::Target > TargetPtr;
typedef boost::shared_ptr< ::tf_follower::Target const> TargetConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::tf_follower::Target_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::tf_follower::Target_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::tf_follower::Target_<ContainerAllocator1> & lhs, const ::tf_follower::Target_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.name == rhs.name &&
    lhs.distance_now == rhs.distance_now &&
    lhs.angle_now == rhs.angle_now &&
    lhs.distance_last == rhs.distance_last &&
    lhs.angle_last == rhs.angle_last;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::tf_follower::Target_<ContainerAllocator1> & lhs, const ::tf_follower::Target_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace tf_follower

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::tf_follower::Target_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tf_follower::Target_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::tf_follower::Target_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::tf_follower::Target_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tf_follower::Target_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tf_follower::Target_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::tf_follower::Target_<ContainerAllocator> >
{
  static const char* value()
  {
    return "0ff1ba6acf5def878d4ff2875af84dc3";
  }

  static const char* value(const ::tf_follower::Target_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x0ff1ba6acf5def87ULL;
  static const uint64_t static_value2 = 0x8d4ff2875af84dc3ULL;
};

template<class ContainerAllocator>
struct DataType< ::tf_follower::Target_<ContainerAllocator> >
{
  static const char* value()
  {
    return "tf_follower/Target";
  }

  static const char* value(const ::tf_follower::Target_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::tf_follower::Target_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"string name\n"
"float64 distance_now\n"
"float64 angle_now\n"
"float64 distance_last\n"
"float64 angle_last\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::tf_follower::Target_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::tf_follower::Target_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.name);
      stream.next(m.distance_now);
      stream.next(m.angle_now);
      stream.next(m.distance_last);
      stream.next(m.angle_last);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Target_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::tf_follower::Target_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::tf_follower::Target_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.name);
    s << indent << "distance_now: ";
    Printer<double>::stream(s, indent + "  ", v.distance_now);
    s << indent << "angle_now: ";
    Printer<double>::stream(s, indent + "  ", v.angle_now);
    s << indent << "distance_last: ";
    Printer<double>::stream(s, indent + "  ", v.distance_last);
    s << indent << "angle_last: ";
    Printer<double>::stream(s, indent + "  ", v.angle_last);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TF_FOLLOWER_MESSAGE_TARGET_H
